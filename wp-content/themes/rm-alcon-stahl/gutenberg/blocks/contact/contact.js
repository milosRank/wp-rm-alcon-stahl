// Import WordPress blocks library
const { registerBlockType } = wp.blocks;

// Import localization library
const { __ } = wp.i18n;

// Import WordPress editor controls
const { InspectorControls, RichText, MediaUpload } = wp.blockEditor;

// Import WordPress Components
const { PanelBody, SelectControl, IconButton } = wp.components;

// Get custom attributes
const customAttributes = custom_attributes;

const domain = customAttributes.domain;

// Import Spacing Component
import { BlockSpacingAttributes } from "../../components/spacings";
import renderSpacingOptions from "../../components/spacings";
import SPACING_OPTIONS from "../../components/spacings/options";
import { getSpacingValues } from "../../components/global-functions/functions";

// Import Background Color Component
import { BackgroundColorComponent } from "../../components/background-color/bundle";
const { BlockBackgroundColor, renderBackgroundOptions, BACKGROUND_OPTIONS } = BackgroundColorComponent;

registerBlockType(`${customAttributes.domain}/${customAttributes.name}`, {
    title: customAttributes.title,
    description: customAttributes.description,
    icon: customAttributes.icon,
    category: customAttributes.category,
    attributes: {
        BlockTitleTag: {
            type: 'string',
            default: 'h2',
        },
        BlockTitle: {
            type: 'string',
            source: 'html',
            selector: '.rich-block-title',
        },
        BlockSubtitle: {
            type: 'string',
            source: 'html',
            selector: '.rich-block-subtitle',
        },
        BlockBackgroundColor, // Imported as a component
        BlockImage: {
            type: 'object',
            default: null,
        },
        ...BlockSpacingAttributes
    },

    /**
     * Edit custom block
     * 
     * @param {object} attributes
     * @param {method} setAttributes
     * 
     * @return {mixed}
     */
    edit: props => {

        const { attributes, setAttributes } = props;

        // Set attributes
        const {
            BlockBackgroundColor,
            BlockTitleTag,
            BlockTitle,
            BlockSubtitle,
            BlockImage,
            ...BlockSpacingAttributes

        } = attributes;

        /* General */


        /* Title */

        /**
         * Save BlockTitleTag attribute
         * 
         * @param {string} newBlockTitleTag
         * 
         * @return {void} 
         */
        const onSelectBlockTitleTag = newBlockTitleTag => {

            setAttributes({ BlockTitleTag: newBlockTitleTag });

        }

        /**
        * Save BlockTitle attribute
        * 
        * @param {string} newBlockTitle
        * 
        * @return {void}
        */
        const onChangeBlockTitle = newBlockTitle => {

            // Check is only empty markup generated by RichText control
            if (newBlockTitle == '<p></p>') {
                setAttributes({ BlockTitle: null });
            }
            else {
                setAttributes({ BlockTitle: newBlockTitle });
            }
        }

        /**
         * Save BlockSubtitle attribute
         * 
         * @param {string} newBlockSubtitle
         * 
         * @return {void}
         */
        const onChangeBlockSubtitle = newBlockSubtitle => {

            // Check is only empty markup generated by RichText control
            if (newBlockSubtitle == '<p></p>') {
                setAttributes({ BlockSubtitle: null });
            }
            else {
                setAttributes({ BlockSubtitle: newBlockSubtitle });
            }

        }

        /* Media */

        /**
         * Save BlockImage attribute
         * 
         * @param {object} newBlockImage
         * 
         * @return {void} 
         */
        const onSelectBlockImage = newBlockImage => {

            setAttributes({ BlockImage: newBlockImage });

        }

        /**
         * Create BlockImage preview
         * 
         * @param {object} BlockImage
         * 
         * @return {mixed}
         */
        const BlockImagePreview = (BlockImage) => {

            if (BlockImage) {
                return (
                    <div className="custom-block-main-image-preview">
                        <img src={BlockImage.url} />
                    </div>
                )
            }

            return null;

        }

        /**
         * Create button for deleting BlockImage attribute
         * 
         * @param {object} BlockImage
         * 
         * @return {mixed}
         */
        const ButtonRemoveBlockImage = (BlockImage) => {

            if (BlockImage) {
                return (
                    <IconButton onClick={onClickRemoveBlockImage} icon="dismiss"
                        className="editor-media-placeholder__button is-button is-default is-large">
                        {__('Remove Block Image', domain)}
                    </IconButton>
                );
            }

            return null;
        }

        /**
         * Delete Image attribute
         * 
         * @return {void} 
         */
        const onClickRemoveBlockImage = BlockImage => {

            setAttributes({ BlockImage: null });

        }

        return ([

            <InspectorControls style={{ marginBottom: '40px' }}>

                <PanelBody title={__('Heading Settings', domain)} initialOpen={false}>

                    <div className="tr-settings-box">

                        <SelectControl label={__('Heading tag', domain)} value={BlockTitleTag}
                            options={[
                                { label: __('h1', domain), value: 'h1' },
                                { label: __('h2', domain), value: 'h2' },
                                { label: __('h3', domain), value: 'h3' },
                                { label: __('h4', domain), value: 'h4' },
                                { label: __('h5', domain), value: 'h5' },
                                { label: __('h6', domain), value: 'h6' },
                            ]}
                            onChange={onSelectBlockTitleTag}
                        />

                    </div>

                </PanelBody>

                <PanelBody title={__('Media', domain)} initialOpen={false} >

                    <div className="tr-media-upload-box" style={{ marginBottom: '40px' }} >
                        <MediaUpload
                            onSelect={onSelectBlockImage}
                            type="image"
                            value={BlockImage}
                            render={({ open }) => (

                                <IconButton onClick={open} icon="upload"
                                    className="editor-media-placeholder__button is-button is-default is-large"
                                >
                                    {__('Background Image', domain)}
                                </IconButton>

                            )}
                        />

                        {BlockImagePreview(BlockImage, BlockImage)}

                        {ButtonRemoveBlockImage(BlockImage)}

                    </div>

                </PanelBody>

                {renderSpacingOptions(props, domain, SPACING_OPTIONS)}

                {renderBackgroundOptions(props, domain, BACKGROUND_OPTIONS)}

            </InspectorControls>,

            <div className="admin-control-box">

                <div className="admin-block-title">{__(customAttributes.title, domain)}</div>

                <div className="admin-block-description">

                    <label> {__(customAttributes.description, domain)} </label>

                </div>

                <div className="tr-form-row">

                    <label>{__('Title', domain)}:</label>

                    <RichText
                        key="editable"
                        tagName={BlockTitleTag}
                        className="rich-block-title"
                        placeholder={__('Insert title', domain)}
                        format="string"
                        allowedFormats={[]}
                        value={BlockTitle}
                        onChange={onChangeBlockTitle}
                    />

                </div>

                <div className="tr-form-row">

                    <label>{__('Subtitle', domain)}:</label>

                    <RichText
                        key="editable"
                        tagName="h4"
                        className="rich-block-subtitle"
                        placeholder={__('Insert Subtitle', domain)}
                        format="string"
                        value={BlockSubtitle}
                        onChange={onChangeBlockSubtitle}
                    />

                </div>

            </div>

        ]);
    },

    /**
     * Save custom block
     * 
     * @param {object} attribute
     * 
     * @return {mixed}
     */
    save: ({ attributes }) => {

        const {
            BlockBackgroundColor,
            BlockTitleTag,
            BlockTitle,
            BlockSubtitle,
            BlockImage,
            ...BlockSpacingAttributes

        } = attributes;

        return (
            <>
                <section className={`contact ${BlockBackgroundColor} ${getSpacingValues(BlockSpacingAttributes)}`}>

                    {(BlockImage != null) &&
                        <div className="bg-image-wrapper">
                            <img src={BlockImage.url} alt={BlockImage.alt} width={BlockImage.sizes.full.width} height={BlockImage.sizes.full.height} className={`bg-image`} />
                        </div>
                    }

                    <div className="container-fluid">
                        <div className="wrapper">
                            <div className="container">

                                <div className="contact__inner">

                                    <form action="">
                                        <div className="form__inner" data-sendmail data-mailto="office@rmalkon.co.rs">

                                            {(BlockTitle != null && BlockTitle.length > 0) &&
                                                <div className="title">
                                                    <RichText.Content
                                                        tagName={BlockTitleTag}
                                                        className="rich-block-title"
                                                        format="string"
                                                        value={BlockTitle}
                                                    />

                                                </div>
                                            }

                                            {(BlockSubtitle != null && BlockSubtitle.length > 0) &&
                                                <div className="subtitle">
                                                    <RichText.Content
                                                        tagName="p"
                                                        className="rich-block-subtitle"
                                                        format="string"
                                                        value={BlockSubtitle}
                                                    />
                                                </div>
                                            }

                                            <div className="input-wrapper">
                                                <input name="user-name" type="text" placeholder="Ime/firma" />
                                            </div>
                                            <textarea name="message" cols="30" rows="14" placeholder="Poruka"></textarea>

                                            <a href="#" className="button button--primary send-mail-trigger" type="submit">Pošalji</a>
                                        </div>
                                    </form>

                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </>
        )
    },
});